/trees:
  get:
    summary: Get trees
    operationId: getTrees
    parameters:
      - name: page[number]
        in: query
        description: Page number for pagination
        schema:
          type: integer
      - name: page[size]
        in: query
        description: Number of records per page for pagination
        schema:
          type: integer
      - name: sort
        in: query
        description: Comma-separated field names to sort by. Use -<fieldname> for descending order.
        schema:
          type: string
      - name: filter
        in: query
        description: Field to filter by, in the format filter[<fieldname>][<operator>]=<value>. Operators can be eq (equals), gt (greater than), lt (less than), gte (greater than or equals), lte (less than or equals), ne (not equals).
        style: deepObject
        explode: true
        schema:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    responses:
      '200':
        description: A list of trees
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/TreesResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
  post:
    summary: Create a new tree
    operationId: createTree
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/CreateTreeRequest'
    responses:
      '201':
        description: A created tree
        headers:
          Location:
            schema:
              type: string
            description: The url of the newly created tree
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/TreeResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
/trees/{treeId}:
  get:
    summary: Get a tree
    operationId: getTree
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '200':
        description: A tree
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/TreeResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
  patch:
    summary: Update a tree
    operationId: updateTree
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/UpdateTreeRequest'
    responses:
      '200':
        description: An updated tree
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/TreeResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
  delete:
    summary: Delete a tree
    operationId: deleteTree
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '204':
        description: Tree successfully deleted
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
/trees/{treeId}/messages:
  get:
    summary: List messages in a tree
    operationId: getTreeMessages
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page[number]
        in: query
        description: Page number for pagination
        schema:
          type: integer
      - name: page[size]
        in: query
        description: Number of records per page for pagination
        schema:
          type: integer
      - name: sort
        in: query
        description: Comma-separated field names to sort by. Use -<fieldname> for descending order.
        schema:
          type: string
      - name: filter
        in: query
        description: Field to filter by, in the format filter[<fieldname>][<operator>]=<value>. Operators can be eq (equals), gt (greater than), lt (less than), gte (greater than or equals), lte (less than or equals), ne (not equals).
        style: deepObject
        explode: true
        schema:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    responses:
      '200':
        description: A list of messages in a tree
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/MessagesResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
  post:
    summary: Create a new message in a tree
    operationId: createTreeMessage
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/CreateMessageRequest'
    responses:
      '201':
        description: A created message
        headers:
          Location:
            schema:
              type: string
            description: The url of the newly created message
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/MessageResponse'
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
/trees/{treeId}/messages/{msgId}:
  patch:
    summary: Update a message in a tree
    operationId: updateTreeMessage
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: msgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      content:
        application/json:
          schema:
            $ref: './schemas.yaml#/UpdateMessageRequest'
    responses:
      '200':
        description: An updated message
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/MessageResponse'
        x-example:
          application/json:
            data:
              id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              type: message
              attributes:
                parent: "69b74bc9-2b5a-4d6e-8a9e-9b8f1e9e45ca"
                role: "system"
                content: "You are a bot that says 'Hello, world!'"
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
  delete:
    summary: Delete a message in a tree
    operationId: deleteTreeMessage
    parameters:
      - name: treeId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: msgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '204':
        description: Message successfully deleted
      default:
        description: Unexpected errors
        content:
          application/json:
            schema:
              $ref: './schemas.yaml#/ErrorsResponse'
